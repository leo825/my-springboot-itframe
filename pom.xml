<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.leo.myspringboot</groupId>
    <artifactId>myspringboot-parent</artifactId>
    <packaging>pom</packaging>
    <version>1.1-SNAPSHOT</version>
    <modules>
        <module>myspringboot-bean</module>
        <module>myspringboot-dao</module>
        <module>myspringboot-iservice</module>
        <module>myspringboot-service-impl</module>
        <module>myspringboot-util</module>
        <module>myspringboot-web</module>
        <module>myspringboot-autoconfigservice</module>
    </modules>

    <properties>
        <myspringboot.core-finalName>myspringboot-core</myspringboot.core-finalName>
        <myspringboot.control-finalName>myspringboot-control</myspringboot.control-finalName>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <skipTests>true</skipTests>
        <spring-boot-starter-parent.version>2.5.12</spring-boot-starter-parent.version>
        <dubbo-spring-boot>1.0.0</dubbo-spring-boot>
        <swagger2.version>2.7.0</swagger2.version>
        <lombok.version>1.18.4</lombok.version>
    </properties>

    <profiles>
        <profile>
            <id>local-dev</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <project.profile>local-dev</project.profile>
                <itframe.mode>local-dev</itframe.mode>
            </properties>
        </profile>
        <profile>
            <id>development</id>
            <properties>
                <project.profile>development</project.profile>
                <itframe.mode>development</itframe.mode>
            </properties>
        </profile>
        <profile>
            <id>production</id>
            <properties>
                <project.profile>production</project.profile>
                <itframe.mode>production</itframe.mode>
            </properties>
        </profile>
        <profile>
            <id>singleprod</id>
            <properties>
                <project.profile>singleprod</project.profile>
                <itframe.mode>singleprod</itframe.mode>
            </properties>
        </profile>

        <profile>
            <id>test</id>
            <properties>
                <project.profile>test</project.profile>
                <itframe.mode>test</itframe.mode>
            </properties>
        </profile>

    </profiles>

    <dependencyManagement>

        <dependencies>
            <dependency>
                <groupId>com.leo.myspringboot</groupId>
                <artifactId>myspringboot-bean</artifactId>
                <version>${version}</version>
            </dependency>

            <dependency>
                <groupId>com.leo.myspringboot</groupId>
                <artifactId>myspringboot-dao</artifactId>
                <version>${version}</version>
            </dependency>
            <dependency>
                <groupId>com.leo.myspringboot</groupId>
                <artifactId>myspringboot-iservice</artifactId>
                <version>${version}</version>
            </dependency>
            <dependency>
                <groupId>com.leo.myspringboot</groupId>
                <artifactId>myspringboot-service-impl</artifactId>
                <version>${version}</version>
            </dependency>
            <dependency>
                <groupId>com.leo.myspringboot</groupId>
                <artifactId>myspringboot-util</artifactId>
                <version>${version}</version>
            </dependency>
            <dependency>
                <groupId>com.leo.myspringboot</groupId>
                <artifactId>myspringboot-autoconfigservice</artifactId>
                <version>${version}</version>
            </dependency>

            <!-- 具体的包引入参考 https://blog.csdn.net/shuxing520/article/details/78213862 -->
            <!-- 上边引入 parent，因此 下边无需指定版本 -->
            <!-- 这是Spring Boot的核心启动器，包含了自动配置、日志和YAML -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter</artifactId>
                <version>${spring-boot-starter-parent.version}</version>
            </dependency>
            <!-- 包含 mvc -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
                <version>${spring-boot-starter-parent.version}</version>
            </dependency>
            <!-- Springboot添加aop-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-aop</artifactId>
                <version>${spring-boot-starter-parent.version}</version>
            </dependency>
            <!-- Springboot添加JavaBean处理工具包支持属性注入 -->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
                <scope>provided</scope>
            </dependency>
            <!-- Springboot添加test-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <version>${spring-boot-starter-parent.version}</version>
                <!-- scope为test表示依赖项目仅仅参与测试相关的工作，包括测试代码的编译，执行。比较典型的如junit -->
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.12</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>commons-logging</groupId>
                <artifactId>commons-logging</artifactId>
                <version>1.0.4</version>
            </dependency>
            <!-- Springboot添加redis连接工具 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-data-redis</artifactId>
                <version>${spring-boot-starter-parent.version}</version>
            </dependency>

            <!-- Springboot添加自动注册类 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-autoconfigure</artifactId>
                <version>${spring-boot-starter-parent.version}</version>
            </dependency>

            <!-- Springboot添加ehcache缓存 -->
            <dependency>
                <groupId>net.sf.ehcache</groupId>
                <artifactId>ehcache</artifactId>
                <version>${spring-boot-starter-parent.version}</version>
            </dependency>

            <!-- Springboot添加mysql-connector-java驱动支持 -->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>5.1.46</version>
            </dependency>

            <!-- Springboot添加mybatis-plus支持-->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-boot-starter</artifactId>
                <version>2.2.0</version>
            </dependency>
            <!-- mybatis-plus代码生成器支持-->
            <dependency>
                <groupId>org.apache.velocity</groupId>
                <artifactId>velocity-engine-core</artifactId>
                <version>2.0</version>
            </dependency>

            <!-- 阿里系的Druid依赖包 -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid</artifactId>
                <version>1.1.9</version>
            </dependency>
            <!-- Druid 依赖 log4j包 -->
            <dependency>
                <groupId>log4j</groupId>
                <artifactId>log4j</artifactId>
                <version>1.2.17</version>
            </dependency>

            <!-- Springboot集成fastjson-->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>1.2.49</version>
            </dependency>

            <!-- 添加commons-lang3工具类是commons-lang升级版解决漏洞问题 -->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.4</version>
            </dependency>

            <!-- Springboot集成swagger-->
            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger-ui</artifactId>
                <version>${swagger2.version}</version>
            </dependency>
            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger2</artifactId>
                <version>${swagger2.version}</version>
            </dependency>

            <!-- Springboot集成dubbo-->
            <dependency>
                <groupId>com.gitee.reger</groupId>
                <artifactId>spring-boot-starter-dubbo</artifactId>
                <version>1.0.10</version>
            </dependency>
            <dependency>
                <groupId>com.101tec</groupId>
                <artifactId>zkclient</artifactId>
                <version>0.5</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <build>

        <!-- 使用指定的filter进行过滤，在执行mvn命令的时候带撒花姑娘-Pproduction就代表生产环境 -->
        <filters>
            <filter>${user.dir}/config/${project.profile}.properties</filter>
        </filters>

        <!-- 需要替换的配置文件的目录，此处是application.properties -->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>

        <!--<pluginManagement>-->
        <plugins>
            <!--编译插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin>

            <!--打包配置插件 -->
            <!--<plugin>-->
                <!--<groupId>org.codehaus.mojo</groupId>-->
                <!--<artifactId>properties-maven-plugin</artifactId>-->
                <!--<version>1.0-alpha-2</version>-->
                <!--<executions>-->
                    <!--<execution>-->
                        <!--<phase>initialize</phase>-->
                        <!--<goals>-->
                            <!--<goal>read-project-properties</goal>-->
                        <!--</goals>-->
                        <!--<configuration>-->
                            <!--<quiet>true</quiet>-->
                            <!--<files>-->
                                <!--<file>${user.dir}/config/${project.profile}.properties</file>-->
                            <!--</files>-->
                            <!--&lt;!&ndash;&lt;!&ndash;输出全部配置项到指定文件&ndash;&gt;&ndash;&gt;-->
                        <!--</configuration>-->
                    <!--</execution>-->
                <!--</executions>-->
            <!--</plugin>-->

        </plugins>
        <!--</pluginManagement>-->

    </build>

</project>